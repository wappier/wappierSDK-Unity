// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="WappierSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class XNSegmentedControl;
@class UITableViewCell;
@class XNReward;
@class UITableView;

SWIFT_CLASS_NAMED("AchievementsDatasource")
@interface XNAchievementsDatasource : NSObject <UITableViewDataSource>
- (nonnull instancetype)initWithCellIdentifier:(NSString * _Nonnull)cellIdentifier segmentControl:(XNSegmentedControl * _Nonnull)segmentControl configureCellClosure:(void (^ _Nonnull)(UITableViewCell * _Nonnull, XNReward * _Nonnull, NSIndexPath * _Nonnull))configureCellClosure OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;
@class XNSessionManagerAdapter;
@class XNOffer;

SWIFT_CLASS_NAMED("AchievementsViewModel")
@interface XNAchievementsViewModel : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSNumber *, NSArray<XNReward *> *> * _Nonnull items;
- (nonnull instancetype)initWithSessionManagerAdapter:(XNSessionManagerAdapter * _Nonnull)sessionManagerAdapter offer:(XNOffer * _Nullable)offer datasource:(XNAchievementsDatasource * _Nonnull)datasource OBJC_DESIGNATED_INITIALIZER;
- (void)fetchLoyaltyItems;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol BaseView;

@interface XNAchievementsViewModel (SWIFT_EXTENSION(WappierSDK))
- (void)viewDidLoadWithView:(id <BaseView> _Nonnull)view;
- (void)loadData;
- (XNReward * _Nullable)getRewardAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end

@class XNInfoView;

SWIFT_CLASS_NAMED("Assets")
@interface XNAssetsV2 : NSObject
@property (nonatomic, readonly, strong) XNInfoView * _Nullable infoView;
@property (nonatomic, readonly, strong) XNInfoView * _Nullable detailView;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)json OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface XNAssetsV2 (SWIFT_EXTENSION(WappierSDK))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)setDetailAssetView:(NSDictionary<NSString *, id> * _Nonnull)json;
@end

@class XNBalancePoints;

SWIFT_CLASS_NAMED("Balances")
@interface XNBalances : NSObject
@property (nonatomic, readonly, strong) XNBalancePoints * _Nullable points;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP10WappierSDK8BaseView_")
@protocol BaseView
- (void)showLoading;
- (void)hideLoading;
- (void)updateUI;
@end

@class XNSection;

SWIFT_CLASS_NAMED("Card")
@interface XNCard : NSObject
@property (nonatomic, readonly, copy) NSArray<XNSection *> * _Nonnull sections;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum XNSectionComponentType : NSInteger;

SWIFT_CLASS_NAMED("Component")
@interface XNComponent : NSObject
@property (nonatomic, readonly) enum XNSectionComponentType name;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP10WappierSDK12HowToWinView_")
@protocol HowToWinView <BaseView>
@end


SWIFT_CLASS_NAMED("HowToWinViewModel")
@interface XNHowToWinViewModel : NSObject
- (nonnull instancetype)initWithSessionManagerAdapter:(XNSessionManagerAdapter * _Nonnull)sessionManagerAdapter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface XNHowToWinViewModel (SWIFT_EXTENSION(WappierSDK))
- (XNReward * _Nullable)getRewardAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getNumberOfOffers SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoadWithView:(id <BaseView> _Nonnull)view;
- (void)fetchHowToWinRewards:(NSArray<NSString *> * _Nonnull)ids;
@end

@class XNTextAsset;
@class XNAsset;
@class XNImageAsset;
@class XNOfferInfoBox;
@class XNDScratchAndWinCardSelection;
@class XNDScratchAndWinCardScratcher;
@class XNCompletedQuest;

SWIFT_CLASS_NAMED("InfoView")
@interface XNInfoView : NSObject
@property (nonatomic, readonly, strong) XNTextAsset * _Nullable titleAsset;
@property (nonatomic, readonly, strong) XNTextAsset * _Nullable subtitleAsset;
@property (nonatomic, readonly, strong) XNTextAsset * _Nullable descriptionAsset;
@property (nonatomic, readonly, strong) XNAsset * _Nullable backgroundAsset;
@property (nonatomic, readonly, strong) XNImageAsset * _Nullable iconAsset;
@property (nonatomic, readonly, strong) XNOfferInfoBox * _Nullable infoBox;
@property (nonatomic, readonly, strong) XNTextAsset * _Nullable winText;
@property (nonatomic, readonly, strong) XNTextAsset * _Nullable loseText;
@property (nonatomic, readonly, strong) XNImageAsset * _Nullable loseIcon;
@property (nonatomic, readonly, strong) XNTextAsset * _Nullable unavailableText;
@property (nonatomic, readonly, strong) XNDScratchAndWinCardSelection * _Nullable cardSelection;
@property (nonatomic, readonly, strong) XNDScratchAndWinCardScratcher * _Nullable scratcher;
@property (nonatomic, readonly, strong) XNCompletedQuest * _Nullable completed;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class XNTactic;

SWIFT_CLASS_NAMED("LoyaltyApiResponse")
@interface XNLoyaltyApiResponse : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull wappierId;
@property (nonatomic, readonly, strong) XNBalances * _Nullable balances;
@property (nonatomic, readonly, copy) NSArray<XNTactic *> * _Nonnull tactics;
@property (nonatomic, readonly, strong) XNCard * _Nullable card;
@property (nonatomic, readonly) NSInteger notifications;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum XNSectionType : NSInteger;

@interface XNLoyaltyApiResponse (SWIFT_EXTENSION(WappierSDK))
- (XNSection * _Nullable)getSectionWithType:(enum XNSectionType)type SWIFT_WARN_UNUSED_RESULT;
- (XNTactic * _Nullable)getTactidWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (XNTactic * _Nullable)getTactidOf:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getRewardGroupsWithTacticId:(NSString * _Nonnull)tacticId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isComponentVisibleWithType:(enum XNSectionType)type SWIFT_WARN_UNUSED_RESULT;
@end

@class XNNetworkManager;

SWIFT_CLASS_NAMED("LoyaltyViewModel")
@interface XNLoyaltyViewModel : NSObject
@property (nonatomic, readonly, strong) XNLoyaltyApiResponse * _Nullable loyaltyResponse;
- (nonnull instancetype)initWithApiService:(XNNetworkManager * _Nonnull)apiService OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSMutableDictionary;

@interface XNLoyaltyViewModel (SWIFT_EXTENSION(WappierSDK))
- (XNTactic * _Nullable)getQuestTactic SWIFT_WARN_UNUSED_RESULT;
- (NSArray<XNTactic *> * _Nonnull)getTileTactics SWIFT_WARN_UNUSED_RESULT;
- (XNSection * _Nullable)getSectionAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getNumberOfSections SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isComponentVisible:(enum XNSectionType)type SWIFT_WARN_UNUSED_RESULT;
- (XNBalancePoints * _Nullable)getBalancePoints SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoadWithView:(id <BaseView> _Nonnull)view;
- (void)fetchLoyaltyWithHeaders:(NSMutableDictionary * _Nonnull)headers;
@end


SWIFT_PROTOCOL("_TtP10WappierSDK20LoyaltyViewModelView_")
@protocol LoyaltyViewModelView <BaseView>
@end

@class UICollectionViewCell;

SWIFT_CLASS_NAMED("MainViewControllerDatasource")
@interface XNMainViewControllerDatasource : NSObject
- (nonnull instancetype)initWithResponse:(XNLoyaltyApiResponse * _Nonnull)response cellConfigClosure:(void (^ _Nonnull)(UICollectionViewCell * _Nonnull, XNTactic * _Nullable, NSIndexPath * _Nonnull))cellConfigClosure balanceCellConfigClosure:(void (^ _Nonnull)(UICollectionViewCell * _Nonnull, XNBalancePoints * _Nonnull))balanceCellConfigClosure OBJC_DESIGNATED_INITIALIZER;
- (void)updateResponse:(XNLoyaltyApiResponse * _Nonnull)response;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UICollectionView;

@interface XNMainViewControllerDatasource (SWIFT_EXTENSION(WappierSDK)) <UICollectionViewDataSource>
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class XNError;
@class XNRedemptionStartApiResponse;
@class XNRedemptionCompleteApiResponse;

SWIFT_CLASS_NAMED("NetworkManager")
@interface XNNetworkManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) XNNetworkManager * _Nonnull shared;)
+ (XNNetworkManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWith:(NSDictionary<NSString *, NSString *> * _Nonnull)headers OBJC_DESIGNATED_INITIALIZER;
- (void)setHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers;
- (void)getLoyaltyWithAssetLevel:(NSString * _Nonnull)assetLevel card:(NSString * _Nonnull)card offers:(NSString * _Nonnull)offers level:(NSString * _Nonnull)level completion:(void (^ _Nonnull)(XNLoyaltyApiResponse * _Nullable, XNError * _Nullable, NSInteger))completion;
- (void)startRedemptionWithRewardId:(NSString * _Nonnull)rewardId handler:(void (^ _Nonnull)(XNRedemptionStartApiResponse * _Nullable, XNError * _Nullable, NSInteger))handler;
- (void)completeRedemptionWithId:(NSString * _Nonnull)redemptionId result:(NSString * _Nonnull)result handler:(void (^ _Nonnull)(XNRedemptionCompleteApiResponse * _Nullable, XNError * _Nullable, NSInteger))handler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, XNOfferStatusType, "OfferStatus", closed) {
  XNOfferStatusTypeActive = 0,
  XNOfferStatusTypeInactive = 1,
  XNOfferStatusTypePending = 2,
};


SWIFT_PROTOCOL("_TtP10WappierSDK14OfferTilesView_")
@protocol OfferTilesView <BaseView>
- (void)showAchievements:(XNOffer * _Nonnull)offer;
- (void)showHappyHourOrHappyDay:(XNOffer * _Nonnull)offer;
- (void)showScratchAndWin:(NSDictionary * _Nonnull)offer tactic:(XNTactic * _Nonnull)tactic;
@end


SWIFT_CLASS_NAMED("OfferTilesViewModel")
@interface XNOfferTilesViewModel : NSObject
- (nonnull instancetype)initWithSessionManagerAdapter:(XNSessionManagerAdapter * _Nonnull)sessionManagerAdapter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface XNOfferTilesViewModel (SWIFT_EXTENSION(WappierSDK))
- (XNTactic * _Nullable)getTacticAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getNumberOfTactics SWIFT_WARN_UNUSED_RESULT;
- (void)updateWithTactics:(NSArray<XNTactic *> * _Nonnull)tactics;
- (void)viewDidLoadWithView:(id <OfferTilesView> _Nonnull)view;
- (void)fetchLoyaltyItemsOfKind:(NSString * _Nonnull)type rewardGroupsIds:(NSArray<NSString *> * _Nonnull)rewardGroupIds;
- (void)fetchScratchRewarForTactic:(XNTactic * _Nonnull)tactic;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, XNOfferType, "OfferType", closed) {
  XNOfferTypeStep = 0,
  XNOfferTypeHappyDay = 1,
  XNOfferTypeHappyHour = 2,
  XNOfferTypeQuest = 3,
  XNOfferTypePoints = 4,
  XNOfferTypeEarnPoints = 5,
  XNOfferTypeSpendPoints = 6,
  XNOfferTypeAchievements = 7,
  XNOfferTypeMasterGiftpack = 8,
  XNOfferTypeGiftpack = 9,
  XNOfferTypeScratch = 10,
  XNOfferTypeBanner = 11,
  XNOfferTypeNormal = 12,
  XNOfferTypeNone = 13,
};


SWIFT_CLASS_NAMED("Points")
@interface XNBalancePoints : NSObject
@property (nonatomic, readonly) NSInteger total;
@property (nonatomic, readonly) NSInteger current;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)json OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, XNRedeemableType, "RedeemableType", closed) {
  XNRedeemableTypePoints = 0,
  XNRedeemableTypeInapp = 1,
  XNRedeemableTypeBalance = 2,
  XNRedeemableTypeToiCoupon = 3,
  XNRedeemableTypeToiCouponCategory = 4,
  XNRedeemableTypeNone = 5,
};

enum XNStatus : NSInteger;

SWIFT_CLASS_NAMED("RedemptionCompleteApiResponse")
@interface XNRedemptionCompleteApiResponse : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull redemptionId;
@property (nonatomic, readonly, copy) NSString * _Nonnull wappierId;
@property (nonatomic, readonly, copy) NSString * _Nonnull installationId;
@property (nonatomic, readonly) enum XNStatus status;
@property (nonatomic, readonly, strong) XNBalances * _Nullable balances;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



enum XNRedemptionStrategyType : NSInteger;
@class XNRedeemable;

SWIFT_CLASS_NAMED("RedemptionStartApiResponse")
@interface XNRedemptionStartApiResponse : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull redemptionId;
@property (nonatomic, readonly) enum XNStatus status;
@property (nonatomic, readonly, copy) NSString * _Nonnull rewardId;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationId;
@property (nonatomic, readonly, copy) NSString * _Nonnull installationId;
@property (nonatomic, readonly, copy) NSString * _Nonnull offerId;
@property (nonatomic, readonly) enum XNRedeemableType redeemableType;
@property (nonatomic, readonly, copy) NSString * _Nonnull sku;
@property (nonatomic, readonly) enum XNRedemptionStrategyType redemptionStrategy;
@property (nonatomic, readonly, copy) NSString * _Nonnull voidAfter;
@property (nonatomic, readonly, strong) XNRedeemable * _Nullable redeemable;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM_NAMED(NSInteger, XNRedemptionStrategyType, "RedemptionStrategyType", closed) {
  XNRedemptionStrategyTypeRedemptionInternal = 0,
  XNRedemptionStrategyTypeRedemptionExternal = 1,
  XNRedemptionStrategyTypeNone = 2,
};


SWIFT_CLASS_NAMED("Section")
@interface XNSection : NSObject
@property (nonatomic, readonly) enum XNSectionType type;
@property (nonatomic, readonly, copy) NSArray<XNComponent *> * _Nonnull components;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, XNSectionComponentType, "SectionComponentType", closed) {
  XNSectionComponentTypeRewardPoints = 0,
  XNSectionComponentTypeLatesPoints = 1,
  XNSectionComponentTypeTotalPoints = 2,
  XNSectionComponentTypeEarnPoints = 3,
  XNSectionComponentTypeTitle = 4,
  XNSectionComponentTypeViewMore = 5,
  XNSectionComponentTypeOffers = 6,
  XNSectionComponentTypeRewardGroups = 7,
  XNSectionComponentTypeNone = 8,
};

typedef SWIFT_ENUM_NAMED(NSInteger, XNSectionType, "SectionType", closed) {
  XNSectionTypeHeader = 0,
  XNSectionTypeHowTo = 1,
  XNSectionTypeFeatured = 2,
  XNSectionTypeChipsCarousel = 3,
  XNSectionTypeCardsCarousel = 4,
  XNSectionTypeBanner = 5,
};

typedef SWIFT_ENUM_NAMED(NSInteger, XNStatus, "Status", closed) {
  XNStatusInProgress = 0,
  XNStatusCompleted = 1,
  XNStatusCanceled = 2,
  XNStatusNone = 3,
};


SWIFT_CLASS_NAMED("StatusHelper")
@interface XNStatusHelper : NSObject
+ (NSString * _Nonnull)toString:(enum XNStatus)status SWIFT_WARN_UNUSED_RESULT;
+ (enum XNStatus)toEnum:(NSString * _Nonnull)status SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum XNTacticViewType : NSInteger;
enum XNTacticStrategy : NSInteger;
@class XNQuestGroup;

SWIFT_CLASS_NAMED("Tactic")
@interface XNTactic : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nonnull kind;
@property (nonatomic, readonly, strong) XNAssetsV2 * _Nullable assets;
@property (nonatomic, readonly) enum XNOfferStatusType status;
@property (nonatomic, readonly) NSInteger timeLeft;
@property (nonatomic, readonly) BOOL featured;
@property (nonatomic, readonly) NSInteger notifications;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull rewardGroups;
@property (nonatomic, readonly) BOOL showGrid;
@property (nonatomic, readonly) NSUInteger matchToWin;
@property (nonatomic, readonly) NSInteger multiplier;
@property (nonatomic, readonly) NSInteger day;
@property (nonatomic, readonly) NSInteger startTime;
@property (nonatomic, readonly) NSInteger endTime;
@property (nonatomic, readonly) enum XNTacticViewType viewType;
@property (nonatomic, readonly) NSInteger currentGroup;
@property (nonatomic, readonly) enum XNTacticStrategy strategy;
@property (nonatomic, readonly) BOOL completed;
@property (nonatomic, readonly, copy) NSArray<XNQuestGroup *> * _Nonnull groups;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init:(NSDictionary<NSString *, id> * _Nullable)json OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface XNTactic (SWIFT_EXTENSION(WappierSDK))
- (NSString * _Nullable)getCountdownText SWIFT_WARN_UNUSED_RESULT;
- (void)setDetailAssetView:(NSDictionary<NSString *, id> * _Nonnull)json;
- (BOOL)hasCurrentGroupUnlockedSteps:(NSInteger)groupIndex SWIFT_WARN_UNUSED_RESULT;
- (void)updateStatusTo:(enum XNOfferStatusType)status;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, XNTacticStrategy, "TacticStrategy", closed) {
  XNTacticStrategyBackfill = 0,
  XNTacticStrategyNoBackfill = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, XNTacticViewType, "TacticViewType", closed) {
  XNTacticViewTypeGroups = 0,
  XNTacticViewTypeSteps = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
